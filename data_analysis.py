import pandas as pd
import matplotlib.pyplot as plt

# Load the telematics dataset generated by the "generator" code
df = pd.read_csv('telematics_data.csv')

# Calculate average speed, average carbon emissions, and total distance travelled for each vehicle
avg_speed_per_vehicle = df.groupby('reg_number')['current_speed'].mean()
avg_carbon_emissions_per_vehicle = df.groupby('reg_number')['carbon_emissions'].mean()
total_distance_per_vehicle = df.groupby('reg_number')['distance'].sum()

# Plot average speed of each vehicle
plt.figure(figsize=(10, 6))
avg_speed_per_vehicle.plot(kind='bar', color='skyblue')
plt.title('Average Speed of Each Vehicle')
plt.xlabel('Vehicle Registration Number')
plt.ylabel('Average Speed (km/h)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('avg_speed_per_vehicle.png')  # Save as PNG
plt.close()

# Plot average carbon emissions of each vehicle
plt.figure(figsize=(10, 6))
avg_carbon_emissions_per_vehicle.plot(kind='bar', color='lightgreen')
plt.title('Average Carbon Emissions of Each Vehicle')
plt.xlabel('Vehicle Registration Number')
plt.ylabel('Average Carbon Emissions (kg)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('avg_carbon_emissions_per_vehicle.png')  # Save as PNG
plt.close()

# Plot total distance travelled by each vehicle
plt.figure(figsize=(10, 6))
total_distance_per_vehicle.plot(kind='bar', color='orange')
plt.title('Total Distance Travelled by Each Vehicle')
plt.xlabel('Vehicle Registration Number')
plt.ylabel('Total Distance Travelled (km)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('total_distance_per_vehicle.png')  # Save as PNG

# Additional analysis/insights
# Example: Plotting distribution of fuel efficiency
plt.figure(figsize=(10, 6))
df['fuel_efficiency'].hist(bins=20, color='salmon', edgecolor='black')
plt.title('Distribution of Fuel Efficiency')
plt.xlabel('Fuel Efficiency (km/L)')
plt.ylabel('Frequency')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('fuel_efficiency_distribution.png')  # Save as PNG

# Time Series of Speed for Vehicle 001
vehicle_001_data = df[df['reg_number'] == '001']
plt.figure(figsize=(10, 6))
plt.plot(vehicle_001_data['timestamp'], vehicle_001_data['current_speed'], color='orange')
plt.title('Time Series of Speed for Vehicle 001')
plt.xlabel('Timestamp')
plt.ylabel('Speed (km/h)')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('speed_time_series_vehicle_001.png')

# Time Series of Carbon Emissions for Vehicle 001
plt.figure(figsize=(10, 6))
plt.plot(vehicle_001_data['timestamp'], vehicle_001_data['carbon_emissions'], color='green')
plt.title('Time Series of Carbon Emissions for Vehicle 001')
plt.xlabel('Timestamp')
plt.ylabel('Carbon Emissions (kg)')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('carbon_emissions_time_series_vehicle_001.png')

# Scatter Plot comparing Percent of Time with Engine On/Off to Total Carbon Emissions for each Vehicle
engine_on_percentage = df.groupby('reg_number')['ignition'].apply(lambda x: (x == 'On').mean() * 100)
total_carbon_emissions = df.groupby('reg_number')['carbon_emissions'].sum()
plt.figure(figsize=(10, 6))
plt.scatter(engine_on_percentage, total_carbon_emissions, color='red', alpha=0.5)
plt.title('Engine On/Off Percentage vs Total Carbon Emissions for each Vehicle')
plt.xlabel('Engine On Percentage (%)')
plt.ylabel('Total Carbon Emissions (kg)')
plt.grid(axis='both', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('engine_on_percentage_vs_carbon_emissions.png')

# Plot heatmap of vehicle locations
background_img = plt.imread("map.png")
plt.figure(figsize=(10, 8))
plt.imshow(background_img, extent=[-1.93, -1.86, 52.46, 52.50])
plt.scatter(df['longitude'], df['latitude'], c='red', alpha=0.5)
plt.title('Heatmap of Vehicle Locations')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(axis='both', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.savefig('vehicle_locations_heatmap.png')
